// Generated by CoffeeScript 1.6.3
(function() {
  var AbstractRouteTable, RouteSegment, RouteSegmentCollection, RouteTable, runTables,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Routes = {};

  AbstractRouteTable = (function() {
    function AbstractRouteTable(data) {
      this._data = data;
    }

    AbstractRouteTable.prototype.data = function(d) {
      if (d) {
        this._data = d;
        return this;
      }
      return this._data;
    };

    return AbstractRouteTable;

  })();

  RouteSegment = (function() {
    function RouteSegment(json) {
      this.id = json.id;
      this._reversed = false;
      this._miles = json.miles;
      this._elevation = json.elevation;
      this._reverse_elevation = json.reverse_elevation;
      this._start_point_id = json.start_point_id;
      this._end_point_id = json.end_point_id;
    }

    RouteSegment.prototype.miles = function() {
      return this._miles;
    };

    RouteSegment.prototype.elevation = function() {
      if (this._reversed) {
        return this._reverse_elevation;
      } else {
        return this._elevation;
      }
    };

    RouteSegment.prototype.reverse_elevation = function() {
      if (this._reversed) {
        return this._elevation;
      } else {
        return this._reverse_elevation;
      }
    };

    RouteSegment.prototype.start_point_id = function() {
      if (this._reversed) {
        return this._end_point_id;
      } else {
        return this._start_point_id;
      }
    };

    RouteSegment.prototype.end_point_id = function() {
      if (this._reversed) {
        return this._start_point_id;
      } else {
        return this._end_point_id;
      }
    };

    RouteSegment.prototype.reverse = function() {
      this._reversed = !this._reversed;
      return this;
    };

    RouteSegment.prototype.components = function() {
      return [this];
    };

    RouteSegment.prototype.name = function() {
      return null;
    };

    return RouteSegment;

  })();

  RouteSegmentCollection = (function() {
    function RouteSegmentCollection(route_segments) {
      this._segments = route_segments;
    }

    RouteSegmentCollection.prototype.sum = function(f) {
      var s, x, _i, _len, _ref;
      s = 0;
      _ref = this._segments;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        x = _ref[_i];
        s += f(x) || 0;
      }
      return s;
    };

    RouteSegmentCollection.prototype.miles = function() {
      return this.sum(function(x) {
        return x.miles();
      });
    };

    RouteSegmentCollection.prototype.elevation = function() {
      return this.sum(function(x) {
        return x.elevation();
      });
    };

    RouteSegmentCollection.prototype.reverse_elevation = function() {
      return this.sum(function(x) {
        return x.reverse_elevation();
      });
    };

    RouteSegmentCollection.prototype.start_point_id = function() {
      return this._segments[0].start_point_id();
    };

    RouteSegmentCollection.prototype.end_point_id = function() {
      return this._segments[this._segments.length - 1].end_point_id();
    };

    RouteSegmentCollection.prototype.reverse = function() {
      return this;
    };

    RouteSegmentCollection.prototype.components = function() {
      return this._segments;
    };

    RouteSegmentCollection.prototype.name = function(n) {
      if (n) {
        this._name = n;
        return this;
      }
      if (this._name) {
        return "<" + this._name + ">";
      }
    };

    return RouteSegmentCollection;

  })();

  RouteTable = (function(_super) {
    __extends(RouteTable, _super);

    function RouteTable(container) {
      this.segment_name_from_points = __bind(this.segment_name_from_points, this);
      this.segment_as_array = __bind(this.segment_as_array, this);
      this.filtered_route_segments = __bind(this.filtered_route_segments, this);
      this.container = container;
      this.route = [];
    }

    RouteTable.prototype.route_points = function(d) {
      if (d) {
        this._route_points = d;
        this._route_points_by_id = this.nest_by_id(d);
        return this;
      }
      return this._route_points;
    };

    RouteTable.prototype.route_segments = function(d) {
      var route_segments, s, _fn, _i, _len;
      if (d) {
        route_segments = [];
        _fn = function(s) {
          route_segments.push(new RouteSegment(s));
          return route_segments.push(new RouteSegment(s).reverse());
        };
        for (_i = 0, _len = d.length; _i < _len; _i++) {
          s = d[_i];
          _fn(s);
        }
        this._route_segments = route_segments;
        return this;
      }
      return this._route_segments;
    };

    RouteTable.prototype.nest_by_id = function(d) {
      var nest, object, _i, _len;
      nest = {};
      for (_i = 0, _len = d.length; _i < _len; _i++) {
        object = d[_i];
        nest[object.id] = object;
      }
      return nest;
    };

    RouteTable.prototype.render = function() {
      return this.render_segments_table();
    };

    RouteTable.prototype.filtered_route_segments = function() {
      var end, last_segment, x, _i, _len, _ref, _results;
      if (this.route.length === 0) {
        return this.route_segments();
      } else {
        last_segment = this.route[this.route.length - 1];
        end = last_segment.end_point_id();
        _ref = this.route_segments();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          if (x.start_point_id() === end) {
            _results.push(x);
          }
        }
        return _results;
      }
    };

    RouteTable.prototype.render_segments_table = function() {
      var controls, rs, segments_table, tds,
        _this = this;
      segments_table = d3.select(this.container).select('#segments');
      rs = segments_table.selectAll('tr.segment').data(this.filtered_route_segments());
      rs.enter().append('tr').attr('class', 'segment');
      tds = rs.selectAll('td').data(this.segment_as_array);
      tds.enter().append('td');
      tds.text(function(d) {
        return d;
      });
      rs.selectAll('td.controls').remove();
      controls = rs.append('td').attr('class', 'controls');
      controls.append('a').attr('href', '#').on('click', function(d) {
        var s, _i, _len, _ref;
        console.log('adding...', d);
        _ref = d.components();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          s = _ref[_i];
          _this.route.push(s);
        }
        _this.render_route_table();
        return _this.render_segments_table();
      }).text('add');
      return rs.exit().remove();
    };

    RouteTable.prototype.render_route_table = function() {
      var route_table, rt, summary, tds, total;
      route_table = d3.select(this.container).select('#route');
      rt = route_table.selectAll('tr.segment').data(this.route);
      total = route_table.selectAll('tr.total').remove();
      rt.enter().append('tr').attr('class', 'segment');
      tds = rt.selectAll('td').data(this.segment_as_array);
      tds.enter().append('td');
      tds.text(function(d) {
        return d;
      });
      total = route_table.append('tr').attr('class', 'total');
      total.append('td');
      total.append('td').text('total:');
      summary = this.route_summary();
      total.append('td').text(summary.miles);
      total.append('td').text(summary.elevation);
      return rt.exit().remove();
    };

    RouteTable.prototype.segment_as_array = function(segment) {
      return [segment.id, this.segment_name(segment), this.miles(segment), this.elevation(segment), this.reverse_elevation(segment)];
    };

    RouteTable.prototype.segment_name = function(segment) {
      return segment.name() || this.segment_name_from_points(segment);
    };

    RouteTable.prototype.render_points_table = function() {
      var points_table, rp;
      points_table = d3.select(this.container).select('#points');
      rp = points_table.selectAll('tr.point').data(this.route_points());
      rp.enter().append('tr').attr('class', 'point');
      rp.append('td').text(function(d) {
        return d.id;
      });
      rp.append('td').text(function(d) {
        return d.name;
      });
      return rp.exit().remove();
    };

    RouteTable.prototype.segment_name_from_points = function(segment) {
      var e, r, s;
      s = segment.start_point_id();
      e = segment.end_point_id();
      r = this._route_points_by_id;
      return "" + s + "-[" + r[s].name + "] to " + e + "-[" + r[e].name + "]";
    };

    RouteTable.prototype.miles = function(segment) {
      return "" + (segment.miles()) + " mi";
    };

    RouteTable.prototype.elevation = function(segment) {
      return "" + (segment.elevation()) + " ft";
    };

    RouteTable.prototype.reverse_elevation = function(segment) {
      return "(" + (segment.reverse_elevation()) + " ft)";
    };

    RouteTable.prototype.route_summary = function() {
      var elevation, miles, segment, _fn, _i, _len, _ref;
      miles = 0;
      elevation = 0;
      _ref = this.route;
      _fn = function(segment) {
        miles += segment.miles();
        return elevation += segment.elevation();
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        segment = _ref[_i];
        _fn(segment);
      }
      return {
        miles: miles.toFixed(1),
        elevation: elevation
      };
    };

    return RouteTable;

  })(AbstractRouteTable);

  runTables = function() {
    window.table = new RouteTable('#container');
    return d3.json("../data/route_points.json", function(error, route_points) {
      return d3.json("../data/route_segments.json", function(error, route_segments) {
        var id, segments, sycamore_to_east_peak_segment_ids;
        table.route_points(route_points).route_segments(route_segments);
        sycamore_to_east_peak_segment_ids = [1, 2, 4, 5, 6];
        segments = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = sycamore_to_east_peak_segment_ids.length; _i < _len; _i++) {
            id = sycamore_to_east_peak_segment_ids[_i];
            _results.push(new RouteSegment(route_segments[id - 1]));
          }
          return _results;
        })();
        window.rsc = new RouteSegmentCollection(segments);
        rsc.name("Mt Tam from Mill Valley");
        table._route_segments.push(rsc);
        return table.render();
      });
    });
  };

  runTables();

}).call(this);
